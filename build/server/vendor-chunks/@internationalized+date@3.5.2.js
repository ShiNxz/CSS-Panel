"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@internationalized+date@3.5.2";
exports.ids = ["vendor-chunks/@internationalized+date@3.5.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@internationalized+date@3.5.2/node_modules/@internationalized/date/dist/import.mjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@internationalized+date@3.5.2/node_modules/@internationalized/date/dist/import.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuddhistCalendar: () => (/* binding */ $8d73d47422ca7302$export$42d20a78301dee44),\n/* harmony export */   CalendarDate: () => (/* binding */ $35ea8db9cb2ccb90$export$99faa760c7908e4f),\n/* harmony export */   CalendarDateTime: () => (/* binding */ $35ea8db9cb2ccb90$export$ca871e8dbb80966f),\n/* harmony export */   CopticCalendar: () => (/* binding */ $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1),\n/* harmony export */   DateFormatter: () => (/* binding */ $fb18d541ea1ad717$export$ad991b66133851cf),\n/* harmony export */   EthiopicAmeteAlemCalendar: () => (/* binding */ $b956b2d7a6cf451f$export$d72e0c37005a4914),\n/* harmony export */   EthiopicCalendar: () => (/* binding */ $b956b2d7a6cf451f$export$26ba6eab5e20cd7d),\n/* harmony export */   GregorianCalendar: () => (/* binding */ $3b62074eb05584b2$export$80ee6245ec4f29ec),\n/* harmony export */   HebrewCalendar: () => (/* binding */ $7c5f6fbf42389787$export$ca405048b8fb5af),\n/* harmony export */   IndianCalendar: () => (/* binding */ $82c358003bdda0a8$export$39f31c639fa15726),\n/* harmony export */   IslamicCivilCalendar: () => (/* binding */ $f2f3e0e3a817edbd$export$2066795aadd37bfc),\n/* harmony export */   IslamicTabularCalendar: () => (/* binding */ $f2f3e0e3a817edbd$export$37f0887f2f9d22f7),\n/* harmony export */   IslamicUmalquraCalendar: () => (/* binding */ $f2f3e0e3a817edbd$export$5baab4758c231076),\n/* harmony export */   JapaneseCalendar: () => (/* binding */ $62225008020f0a13$export$b746ab2b60cdffbf),\n/* harmony export */   PersianCalendar: () => (/* binding */ $f3ed2e4472ae7e25$export$37fccdbfd14c5939),\n/* harmony export */   TaiwanCalendar: () => (/* binding */ $5f31bd6f0c8940b2$export$65e01080afcb0799),\n/* harmony export */   Time: () => (/* binding */ $35ea8db9cb2ccb90$export$680ea196effce5f),\n/* harmony export */   ZonedDateTime: () => (/* binding */ $35ea8db9cb2ccb90$export$d3b7288e7994edea),\n/* harmony export */   createCalendar: () => (/* binding */ $64244302c3013299$export$dd0bbc9b26defe37),\n/* harmony export */   endOfMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$a2258d9c4118825c),\n/* harmony export */   endOfWeek: () => (/* binding */ $14e0f24ef4ac5c92$export$ef8b6d9133084f4e),\n/* harmony export */   endOfYear: () => (/* binding */ $14e0f24ef4ac5c92$export$8b7aa55c66d5569e),\n/* harmony export */   fromAbsolute: () => (/* binding */ $11d87f3f76e88657$export$1b96692a1ba042ac),\n/* harmony export */   fromDate: () => (/* binding */ $11d87f3f76e88657$export$e57ff100d91bd4b9),\n/* harmony export */   getDayOfWeek: () => (/* binding */ $14e0f24ef4ac5c92$export$2061056d06d7cdf7),\n/* harmony export */   getHoursInDay: () => (/* binding */ $14e0f24ef4ac5c92$export$126c91c941de7e),\n/* harmony export */   getLocalTimeZone: () => (/* binding */ $14e0f24ef4ac5c92$export$aa8b41735afcabd2),\n/* harmony export */   getMinimumDayInMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$b2f4953d301981d5),\n/* harmony export */   getMinimumMonthInYear: () => (/* binding */ $14e0f24ef4ac5c92$export$5412ac11713b72ad),\n/* harmony export */   getWeeksInMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$ccc1b2479e7dd654),\n/* harmony export */   isEqualDay: () => (/* binding */ $14e0f24ef4ac5c92$export$91b62ebf2ba703ee),\n/* harmony export */   isEqualMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2),\n/* harmony export */   isEqualYear: () => (/* binding */ $14e0f24ef4ac5c92$export$ea840f5a6dda8147),\n/* harmony export */   isSameDay: () => (/* binding */ $14e0f24ef4ac5c92$export$ea39ec197993aef0),\n/* harmony export */   isSameMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$a18c89cbd24170ff),\n/* harmony export */   isSameYear: () => (/* binding */ $14e0f24ef4ac5c92$export$5841f9eb9773f25f),\n/* harmony export */   isToday: () => (/* binding */ $14e0f24ef4ac5c92$export$629b0a497aa65267),\n/* harmony export */   isWeekday: () => (/* binding */ $14e0f24ef4ac5c92$export$ee9d87258e1d19ed),\n/* harmony export */   isWeekend: () => (/* binding */ $14e0f24ef4ac5c92$export$618d60ea299da42),\n/* harmony export */   maxDate: () => (/* binding */ $14e0f24ef4ac5c92$export$a75f2bff57811055),\n/* harmony export */   minDate: () => (/* binding */ $14e0f24ef4ac5c92$export$5c333a116e949cdd),\n/* harmony export */   now: () => (/* binding */ $14e0f24ef4ac5c92$export$461939dd4422153),\n/* harmony export */   parseAbsolute: () => (/* binding */ $fae977aafc393c5c$export$5adfdab05168c219),\n/* harmony export */   parseAbsoluteToLocal: () => (/* binding */ $fae977aafc393c5c$export$8e384432362ed0f0),\n/* harmony export */   parseDate: () => (/* binding */ $fae977aafc393c5c$export$6b862160d295c8e),\n/* harmony export */   parseDateTime: () => (/* binding */ $fae977aafc393c5c$export$588937bcd60ade55),\n/* harmony export */   parseDuration: () => (/* binding */ $fae977aafc393c5c$export$ecae829bb3747ea6),\n/* harmony export */   parseTime: () => (/* binding */ $fae977aafc393c5c$export$c9698ec7f05a07e1),\n/* harmony export */   parseZonedDateTime: () => (/* binding */ $fae977aafc393c5c$export$fd7893f06e92a6a4),\n/* harmony export */   startOfMonth: () => (/* binding */ $14e0f24ef4ac5c92$export$a5a3b454ada2268e),\n/* harmony export */   startOfWeek: () => (/* binding */ $14e0f24ef4ac5c92$export$42c81a444fbfb5d4),\n/* harmony export */   startOfYear: () => (/* binding */ $14e0f24ef4ac5c92$export$f91e89d3d0406102),\n/* harmony export */   toCalendar: () => (/* binding */ $11d87f3f76e88657$export$b4a036af3fc0b032),\n/* harmony export */   toCalendarDate: () => (/* binding */ $11d87f3f76e88657$export$93522d1a439f3617),\n/* harmony export */   toCalendarDateTime: () => (/* binding */ $11d87f3f76e88657$export$b21e0b124e224484),\n/* harmony export */   toLocalTimeZone: () => (/* binding */ $11d87f3f76e88657$export$d9b67bc93c097491),\n/* harmony export */   toTime: () => (/* binding */ $11d87f3f76e88657$export$d33f79e3ffc3dc83),\n/* harmony export */   toTimeZone: () => (/* binding */ $11d87f3f76e88657$export$538b00033cc11c75),\n/* harmony export */   toZoned: () => (/* binding */ $11d87f3f76e88657$export$84c95a83c799e074),\n/* harmony export */   today: () => (/* binding */ $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_class_private_field_init */ \"(ssr)/./node_modules/.pnpm/@swc+helpers@0.5.2/node_modules/@swc/helpers/esm/_class_private_field_init.js\");\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n    return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n    if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);\n    else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n    if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n    else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n    year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n    let y1 = year - 1;\n    let monthOffset = -2;\n    if (month <= 2) monthOffset = 0;\n    else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n    return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n    return era === \"BC\" ? 1 - year : year;\n}\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n    let era = \"AD\";\n    if (year <= 0) {\n        era = \"BC\";\n        year = 1 - year;\n    }\n    return [\n        era,\n        year\n    ];\n}\nconst $3b62074eb05584b2$var$daysInMonth = {\n    standard: [\n        31,\n        28,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ],\n    leapyear: [\n        31,\n        29,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ]\n};\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n    fromJulianDay(jd) {\n        let jd0 = jd;\n        let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n        let quadricent = Math.floor(depoch / 146097);\n        let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n        let cent = Math.floor(dqc / 36524);\n        let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n        let quad = Math.floor(dcent / 1461);\n        let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n        let yindex = Math.floor(dquad / 365);\n        let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n        let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n        let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n        let leapAdj = 2;\n        if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;\n        else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n        let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n        let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n    }\n    toJulianDay(date) {\n        return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getMonthsInYear(date) {\n        return 12;\n    }\n    getDaysInYear(date) {\n        return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getYearsInEra(date) {\n        return 9999;\n    }\n    getEras() {\n        return [\n            \"BC\",\n            \"AD\"\n        ];\n    }\n    isInverseEra(date) {\n        return date.era === \"BC\";\n    }\n    balanceDate(date) {\n        if (date.year <= 0) {\n            date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n            date.year = 1 - date.year;\n        }\n    }\n    constructor(){\n        this.identifier = \"gregory\";\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n    \"001\": 1,\n    AD: 1,\n    AE: 6,\n    AF: 6,\n    AI: 1,\n    AL: 1,\n    AM: 1,\n    AN: 1,\n    AR: 1,\n    AT: 1,\n    AU: 1,\n    AX: 1,\n    AZ: 1,\n    BA: 1,\n    BE: 1,\n    BG: 1,\n    BH: 6,\n    BM: 1,\n    BN: 1,\n    BY: 1,\n    CH: 1,\n    CL: 1,\n    CM: 1,\n    CN: 1,\n    CR: 1,\n    CY: 1,\n    CZ: 1,\n    DE: 1,\n    DJ: 6,\n    DK: 1,\n    DZ: 6,\n    EC: 1,\n    EE: 1,\n    EG: 6,\n    ES: 1,\n    FI: 1,\n    FJ: 1,\n    FO: 1,\n    FR: 1,\n    GB: 1,\n    GE: 1,\n    GF: 1,\n    GP: 1,\n    GR: 1,\n    HR: 1,\n    HU: 1,\n    IE: 1,\n    IQ: 6,\n    IR: 6,\n    IS: 1,\n    IT: 1,\n    JO: 6,\n    KG: 1,\n    KW: 6,\n    KZ: 1,\n    LB: 1,\n    LI: 1,\n    LK: 1,\n    LT: 1,\n    LU: 1,\n    LV: 1,\n    LY: 6,\n    MC: 1,\n    MD: 1,\n    ME: 1,\n    MK: 1,\n    MN: 1,\n    MQ: 1,\n    MV: 5,\n    MY: 1,\n    NL: 1,\n    NO: 1,\n    NZ: 1,\n    OM: 6,\n    PL: 1,\n    QA: 6,\n    RE: 1,\n    RO: 1,\n    RS: 1,\n    RU: 1,\n    SD: 6,\n    SE: 1,\n    SI: 1,\n    SK: 1,\n    SM: 1,\n    SY: 6,\n    TJ: 1,\n    TM: 1,\n    TR: 1,\n    UA: 1,\n    UY: 1,\n    UZ: 1,\n    VA: 1,\n    VN: 1,\n    XK: 1\n};\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n    b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n    return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n    b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n    // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n    a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n    b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n    return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n    b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n    a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n    b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n    return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n    a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n    b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n    a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n    b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n    return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n    let julian = date.calendar.toJulianDay(date);\n    // If julian is negative, then julian % 7 will be negative, so we adjust\n    // accordingly.  Julian day 0 is Monday.\n    let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n    if (dayOfWeek < 0) dayOfWeek += 7;\n    return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n    return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n    return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n    return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n    return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n    return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n    let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n    let tomorrow = a.add({\n        days: 1\n    });\n    let tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n    return (tomorrowMs - ms) / 3600000;\n}\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n    // TODO: invalidate this somehow?\n    if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n    // Use `subtract` instead of `set` so we don't get constrained in an era.\n    return date.subtract({\n        days: date.day - 1\n    });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n    return date.add({\n        days: date.calendar.getDaysInMonth(date) - date.day\n    });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n    return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n        months: date.month - 1\n    }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n    return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n        months: date.calendar.getMonthsInYear(date) - date.month\n    }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n    if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n    return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n    if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n    return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n    let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n    return date.subtract({\n        days: dayOfWeek\n    });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n    return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n        days: 6\n    });\n}\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n    // If the Intl.Locale API is available, use it to get the region for the locale.\n    // @ts-ignore\n    if (Intl.Locale) {\n        // Constructing an Intl.Locale is expensive, so cache the result.\n        let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n        if (!region) {\n            // @ts-ignore\n            region = new Intl.Locale(locale).maximize().region;\n            if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n        }\n        return region;\n    }\n    // If not, just try splitting the string.\n    // If the second part of the locale string is 'u',\n    // then this is a unicode extension, so ignore it.\n    // Otherwise, it should be the region.\n    let part = locale.split(\"-\")[1];\n    return part === \"u\" ? undefined : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n    // TODO: use Intl.Locale for this once browsers support the weekInfo property\n    // https://github.com/tc39/proposal-intl-locale-info\n    let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n    return region ? (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n    let days = date.calendar.getDaysInMonth(date);\n    return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n    if (a && b) return a.compare(b) <= 0 ? a : b;\n    return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n    if (a && b) return a.compare(b) >= 0 ? a : b;\n    return a || b;\n}\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n    AF: [\n        4,\n        5\n    ],\n    AE: [\n        5,\n        6\n    ],\n    BH: [\n        5,\n        6\n    ],\n    DZ: [\n        5,\n        6\n    ],\n    EG: [\n        5,\n        6\n    ],\n    IL: [\n        5,\n        6\n    ],\n    IQ: [\n        5,\n        6\n    ],\n    IR: [\n        5,\n        5\n    ],\n    JO: [\n        5,\n        6\n    ],\n    KW: [\n        5,\n        6\n    ],\n    LY: [\n        5,\n        6\n    ],\n    OM: [\n        5,\n        6\n    ],\n    QA: [\n        5,\n        6\n    ],\n    SA: [\n        5,\n        6\n    ],\n    SD: [\n        5,\n        6\n    ],\n    SY: [\n        5,\n        6\n    ],\n    YE: [\n        5,\n        6\n    ]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n    let julian = date.calendar.toJulianDay(date);\n    // If julian is negative, then julian % 7 will be negative, so we adjust\n    // accordingly.  Julian day 0 is Monday.\n    let dayOfWeek = Math.ceil(julian + 1) % 7;\n    if (dayOfWeek < 0) dayOfWeek += 7;\n    let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n    // Use Intl.Locale for this once weekInfo is supported.\n    // https://github.com/tc39/proposal-intl-locale-info\n    let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [\n        6,\n        0\n    ];\n    return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n    return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n    date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n    return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n    // Note: Date.UTC() interprets one and two-digit years as being in the\n    // 20th century, so don't use it\n    let date = new Date();\n    date.setUTCHours(hour, minute, second, millisecond);\n    date.setUTCFullYear(year, month - 1, day);\n    return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n    // Fast path for UTC.\n    if (timeZone === \"UTC\") return 0;\n    // Fast path: for local timezone after 1970, use native Date.\n    if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n    let { year: year, month: month, day: day, hour: hour, minute: minute, second: second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n    let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n    return utc - Math.floor(ms / 1000) * 1000;\n}\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n    let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n    if (!formatter) {\n        formatter = new Intl.DateTimeFormat(\"en-US\", {\n            timeZone: timeZone,\n            hour12: false,\n            era: \"short\",\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\"\n        });\n        $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n    }\n    let parts = formatter.formatToParts(new Date(ms));\n    let namedParts = {};\n    for (let part of parts)if (part.type !== \"literal\") namedParts[part.type] = part.value;\n    return {\n        // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n        year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n        month: +namedParts.month,\n        day: +namedParts.day,\n        hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n        minute: +namedParts.minute,\n        second: +namedParts.second\n    };\n}\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n    let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n    let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n    return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n    let found = earlier === later ? [\n        earlier\n    ] : [\n        earlier,\n        later\n    ];\n    return found.filter((absolute)=>$11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n    let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n    return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = \"compatible\") {\n    let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n    // Fast path: if the time zone is UTC, use native Date.\n    if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n    // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n    if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n        dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n        let date = new Date();\n        let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n        date.setFullYear(year, dateTime.month - 1, dateTime.day);\n        date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n        return date.getTime();\n    }\n    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n    let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n    let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n    let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n    if (valid.length === 1) return valid[0];\n    if (valid.length > 1) switch(disambiguation){\n        // 'compatible' means 'earlier' for \"fall back\" transitions\n        case \"compatible\":\n        case \"earlier\":\n            return valid[0];\n        case \"later\":\n            return valid[valid.length - 1];\n        case \"reject\":\n            throw new RangeError(\"Multiple possible absolute times found\");\n    }\n    switch(disambiguation){\n        case \"earlier\":\n            return Math.min(ms - offsetBefore, ms - offsetAfter);\n        // 'compatible' means 'later' for \"spring forward\" transitions\n        case \"compatible\":\n        case \"later\":\n            return Math.max(ms - offsetBefore, ms - offsetAfter);\n        case \"reject\":\n            throw new RangeError(\"No such absolute time found\");\n    }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = \"compatible\") {\n    return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n    let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n    let date = new Date(ms + offset);\n    let year = date.getUTCFullYear();\n    let month = date.getUTCMonth() + 1;\n    let day = date.getUTCDate();\n    let hour = date.getUTCHours();\n    let minute = date.getUTCMinutes();\n    let second = date.getUTCSeconds();\n    let millisecond = date.getUTCMilliseconds();\n    return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n    return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n    return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n    return {\n        era: date.era,\n        year: date.year,\n        month: date.month,\n        day: date.day\n    };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n    return {\n        hour: date.hour,\n        minute: date.minute,\n        second: date.second,\n        millisecond: date.millisecond\n    };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n    let hour = 0, minute = 0, second = 0, millisecond = 0;\n    if (\"timeZone\" in date) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = date);\n    else if (\"hour\" in date && !time) return date;\n    if (time) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = time);\n    return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n    return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n    if (date.calendar.identifier === calendar.identifier) return date;\n    let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n    let copy = date.copy();\n    copy.calendar = calendar;\n    copy.era = calendarDate.era;\n    copy.year = calendarDate.year;\n    copy.month = calendarDate.month;\n    copy.day = calendarDate.day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n    return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n    if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n        if (date.timeZone === timeZone) return date;\n        return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n    }\n    let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n    return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n    return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n    return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n    let mutableDate = date.copy();\n    let days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n    $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n    if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n    mutableDate.month += duration.months || 0;\n    $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n    $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n    mutableDate.day += (duration.weeks || 0) * 7;\n    mutableDate.day += duration.days || 0;\n    mutableDate.day += days;\n    $735220c2d4774dd3$var$balanceDay(mutableDate);\n    if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n    // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n    // The behavior here is slightly different than when constraining in the `set` function in that\n    // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n    // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n    if (mutableDate.year < 1) {\n        mutableDate.year = 1;\n        mutableDate.month = 1;\n        mutableDate.day = 1;\n    }\n    let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n    if (mutableDate.year > maxYear) {\n        var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;\n        let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n        mutableDate.year = maxYear;\n        mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n        mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n    }\n    if (mutableDate.month < 1) {\n        mutableDate.month = 1;\n        mutableDate.day = 1;\n    }\n    let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n    if (mutableDate.month > maxMonth) {\n        mutableDate.month = maxMonth;\n        mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n    }\n    mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n    return mutableDate;\n}\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n    var _date_calendar_isInverseEra, _date_calendar;\n    if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n    date.year += years;\n}\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n    while(date.month < 1){\n        $735220c2d4774dd3$var$addYears(date, -1);\n        date.month += date.calendar.getMonthsInYear(date);\n    }\n    let monthsInYear = 0;\n    while(date.month > (monthsInYear = date.calendar.getMonthsInYear(date))){\n        date.month -= monthsInYear;\n        $735220c2d4774dd3$var$addYears(date, 1);\n    }\n}\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n    while(date.day < 1){\n        date.month--;\n        $735220c2d4774dd3$var$balanceYearMonth(date);\n        date.day += date.calendar.getDaysInMonth(date);\n    }\n    while(date.day > date.calendar.getDaysInMonth(date)){\n        date.day -= date.calendar.getDaysInMonth(date);\n        date.month++;\n        $735220c2d4774dd3$var$balanceYearMonth(date);\n    }\n}\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n    date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n    date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n    if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n    date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n    $735220c2d4774dd3$var$constrainMonthDay(date);\n}\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n    let inverseDuration = {};\n    for(let key in duration)if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n    return inverseDuration;\n}\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n    let mutableDate = date.copy();\n    if (fields.era != null) mutableDate.era = fields.era;\n    if (fields.year != null) mutableDate.year = fields.year;\n    if (fields.month != null) mutableDate.month = fields.month;\n    if (fields.day != null) mutableDate.day = fields.day;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n    return mutableDate;\n}\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n    let mutableValue = value.copy();\n    if (fields.hour != null) mutableValue.hour = fields.hour;\n    if (fields.minute != null) mutableValue.minute = fields.minute;\n    if (fields.second != null) mutableValue.second = fields.second;\n    if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n    $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n    return mutableValue;\n}\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n    time.second += Math.floor(time.millisecond / 1000);\n    time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n    time.minute += Math.floor(time.second / 60);\n    time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n    time.hour += Math.floor(time.minute / 60);\n    time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n    let days = Math.floor(time.hour / 24);\n    time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n    return days;\n}\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n    time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n    time.second = Math.max(0, Math.min(time.second, 59));\n    time.minute = Math.max(0, Math.min(time.minute, 59));\n    time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n    let result = a % b;\n    if (result < 0) result += b;\n    return result;\n}\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n    time.hour += duration.hours || 0;\n    time.minute += duration.minutes || 0;\n    time.second += duration.seconds || 0;\n    time.millisecond += duration.milliseconds || 0;\n    return $735220c2d4774dd3$var$balanceTime(time);\n}\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n    let res = time.copy();\n    $735220c2d4774dd3$var$addTimeFields(res, duration);\n    return res;\n}\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n    return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n    let mutable = value.copy();\n    switch(field){\n        case \"era\":\n            {\n                let eras = value.calendar.getEras();\n                let eraIndex = eras.indexOf(value.era);\n                if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n                eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n                mutable.era = eras[eraIndex];\n                // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n                $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n                break;\n            }\n        case \"year\":\n            var _mutable_calendar_isInverseEra, _mutable_calendar;\n            if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;\n            // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n            // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n            // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n            mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n            if (mutable.year === -Infinity) mutable.year = 1;\n            if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n            break;\n        case \"month\":\n            mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"day\":\n            mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n            break;\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n    if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n    return mutable;\n}\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n    let mutable = value.copy();\n    switch(field){\n        case \"hour\":\n            {\n                let hours = value.hour;\n                let min = 0;\n                let max = 23;\n                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n                    let isPM = hours >= 12;\n                    min = isPM ? 12 : 0;\n                    max = isPM ? 23 : 11;\n                }\n                mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n                break;\n            }\n        case \"minute\":\n            mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"second\":\n            mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"millisecond\":\n            mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n    return mutable;\n}\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {\n    if (round) {\n        value += Math.sign(amount);\n        if (value < min) value = max;\n        let div = Math.abs(amount);\n        if (amount > 0) value = Math.ceil(value / div) * div;\n        else value = Math.floor(value / div) * div;\n        if (value > max) value = min;\n    } else {\n        value += amount;\n        if (value < min) value = max - (min - value - 1);\n        else if (value > max) value = min + (value - max - 1);\n    }\n    return value;\n}\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n    let ms;\n    if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {\n        let res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n            years: duration.years,\n            months: duration.months,\n            weeks: duration.weeks,\n            days: duration.days\n        });\n        // Changing the date may change the timezone offset, so we need to recompute\n        // using the 'compatible' disambiguation.\n        ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n    } else ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n    // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n    // For example, adding one hour during a DST transition may result in the hour field staying the same or\n    // skipping an hour. This results in the offset field changing value instead of the specified field.\n    ms += duration.milliseconds || 0;\n    ms += (duration.seconds || 0) * 1000;\n    ms += (duration.minutes || 0) * 60000;\n    ms += (duration.hours || 0) * 3600000;\n    let res = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n    return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);\n}\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n    return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n    // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n    // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n    // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n    switch(field){\n        case \"hour\":\n            {\n                let min = 0;\n                let max = 23;\n                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n                    let isPM = dateTime.hour >= 12;\n                    min = isPM ? 12 : 0;\n                    max = isPM ? 23 : 11;\n                }\n                // The minimum and maximum hour may be affected by daylight saving time.\n                // For example, it might jump forward at midnight, and skip 1am.\n                // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n                // the possible absolute times for the min and max, and find the maximum range\n                // that is within the current day.\n                let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n                let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n                    hour: min\n                }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n                let minAbsolute = [\n                    (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"),\n                    (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")\n                ].filter((ms)=>(0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];\n                let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n                    hour: max\n                }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n                let maxAbsolute = [\n                    (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"),\n                    (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")\n                ].filter((ms)=>(0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop();\n                // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n                // This is done in hours from the Unix epoch so that cycleValue works correctly,\n                // and then converted back to milliseconds.\n                let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n                let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n                let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n                ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;\n                // Now compute the new timezone offset, and convert the absolute time back to local time.\n                return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n            }\n        case \"minute\":\n        case \"second\":\n        case \"millisecond\":\n            // @ts-ignore\n            return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n            {\n                let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n                let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n                return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n            }\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n}\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n    // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n    // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n    let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n    let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n    // If the resulting plain date time values are equal, return the original time.\n    // We don't want to change the offset when setting the time to the same value.\n    if (res.compare(plainDateTime) === 0) return dateTime;\n    let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n    return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nconst $fae977aafc393c5c$var$DATE_TIME_DURATION_RE = /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst $fae977aafc393c5c$var$requiredDurationTimeGroups = [\n    \"hours\",\n    \"minutes\",\n    \"seconds\"\n];\nconst $fae977aafc393c5c$var$requiredDurationGroups = [\n    \"years\",\n    \"months\",\n    \"weeks\",\n    \"days\",\n    ...$fae977aafc393c5c$var$requiredDurationTimeGroups\n];\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n    let m = value.match($fae977aafc393c5c$var$TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n    return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n    let m = value.match($fae977aafc393c5c$var$DATE_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n    let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    return date;\n}\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n    let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    return date;\n}\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n    let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n    let ms;\n    if (m[8]) {\n        var _m_;\n        date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n        ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset;\n        // Validate offset against parsed date.\n        let absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n        if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n    } else ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n    return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n    let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    var _m_;\n    if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n    return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n    let val = Number(value);\n    if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n    return val;\n}\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n    return `${String(time.hour).padStart(2, \"0\")}:${String(time.minute).padStart(2, \"0\")}:${String(time.second).padStart(2, \"0\")}${time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\"}`;\n}\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n    let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    return `${String(gregorianDate.year).padStart(4, \"0\")}-${String(gregorianDate.month).padStart(2, \"0\")}-${String(gregorianDate.day).padStart(2, \"0\")}`;\n}\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n    // @ts-ignore\n    return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n    let sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n    offset = Math.abs(offset);\n    let offsetHours = Math.floor(offset / 3600000);\n    let offsetMinutes = offset % 3600000 / 60000;\n    return `${sign}${String(offsetHours).padStart(2, \"0\")}:${String(offsetMinutes).padStart(2, \"0\")}`;\n}\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n    return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\nfunction $fae977aafc393c5c$export$ecae829bb3747ea6(value) {\n    var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;\n    const match = value.match($fae977aafc393c5c$var$DATE_TIME_DURATION_RE);\n    if (!match) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    const parseDurationGroup = (group, isNegative, min, max)=>{\n        if (!group) return 0;\n        try {\n            const sign = isNegative ? -1 : 1;\n            return sign * $fae977aafc393c5c$var$parseNumber(group.replace(\",\", \".\"), min, max);\n        } catch  {\n            throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n        }\n    };\n    const isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);\n    const hasRequiredGroups = $fae977aafc393c5c$var$requiredDurationGroups.some((group)=>{\n        var _match_groups;\n        return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n    });\n    if (!hasRequiredGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    const durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;\n    if (durationStringIncludesTime) {\n        const hasRequiredDurationTimeGroups = $fae977aafc393c5c$var$requiredDurationTimeGroups.some((group)=>{\n            var _match_groups;\n            return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n        });\n        if (!hasRequiredDurationTimeGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n    const duration = {\n        years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),\n        months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),\n        weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),\n        days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),\n        hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),\n        minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),\n        seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)\n    };\n    if (duration.hours !== undefined && duration.hours % 1 !== 0 && (duration.minutes || duration.seconds)) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n    if (duration.minutes !== undefined && duration.minutes % 1 !== 0 && duration.seconds) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n    return duration;\n}\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n    let calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n    let era;\n    if (typeof args[0] === \"string\") era = args.shift();\n    else {\n        let eras = calendar.getEras();\n        era = eras[eras.length - 1];\n    }\n    let year = args.shift();\n    let month = args.shift();\n    let day = args.shift();\n    return [\n        calendar,\n        era,\n        year,\n        month,\n        day\n    ];\n}\nvar // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/ new WeakMap();\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);\n        else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n    }\n    /** Returns a new `CalendarDate` with the given duration added to it. */ add(duration) {\n        return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n    }\n    /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */ toDate(timeZone) {\n        return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */ toString() {\n        return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    }\n    constructor(...args){\n        (0, _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_0__._)(this, $35ea8db9cb2ccb90$var$_type, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n    }\n}\nvar // @ts-ignore\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/ new WeakMap();\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n    /** Returns a copy of this time. */ copy() {\n        return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `Time` with the given duration added to it. */ add(duration) {\n        return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n    }\n    /** Returns a new `Time` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n    }\n    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n    }\n    /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n    /** Converts the time to an ISO 8601 formatted string. */ toString() {\n        return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n    }\n    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */ compare(b) {\n        return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n    }\n    constructor(hour = 0, minute = 0, second = 0, millisecond = 0){\n        (0, _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_0__._)(this, $35ea8db9cb2ccb90$var$_type1, {\n            writable: true,\n            value: void 0\n        });\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.millisecond = millisecond;\n        (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n    }\n}\nvar // @ts-ignore\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/ new WeakMap();\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n        else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration added to it. */ add(duration) {\n        return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n    }\n    /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        switch(field){\n            case \"era\":\n            case \"year\":\n            case \"month\":\n            case \"day\":\n                return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n            default:\n                return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n        }\n    }\n    /** Converts the date to a native JavaScript Date object in the given time zone. */ toDate(timeZone, disambiguation) {\n        return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */ toString() {\n        return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n        if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n        return res;\n    }\n    constructor(...args){\n        (0, _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_0__._)(this, $35ea8db9cb2ccb90$var$_type2, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.hour = args.shift() || 0;\n        this.minute = args.shift() || 0;\n        this.second = args.shift() || 0;\n        this.millisecond = args.shift() || 0;\n        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n    }\n}\nvar // @ts-ignore\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/ new WeakMap();\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n        else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration added to it. */ add(duration) {\n        return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields, disambiguation) {\n        return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n    }\n    /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object. */ toDate() {\n        return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */ toString() {\n        return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string in UTC. */ toAbsoluteString() {\n        return this.toDate().toISOString();\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        // TODO: Is this a bad idea??\n        return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n    }\n    constructor(...args){\n        (0, _swc_helpers_class_private_field_init__WEBPACK_IMPORTED_MODULE_0__._)(this, $35ea8db9cb2ccb90$var$_type3, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n        let timeZone = args.shift();\n        let offset = args.shift();\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.timeZone = timeZone;\n        this.offset = offset;\n        this.hour = args.shift() || 0;\n        this.minute = args.shift() || 0;\n        this.second = args.shift() || 0;\n        this.millisecond = args.shift() || 0;\n        (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $62225008020f0a13$var$ERA_START_DATES = [\n    [\n        1868,\n        9,\n        8\n    ],\n    [\n        1912,\n        7,\n        30\n    ],\n    [\n        1926,\n        12,\n        25\n    ],\n    [\n        1989,\n        1,\n        8\n    ],\n    [\n        2019,\n        5,\n        1\n    ]\n];\nconst $62225008020f0a13$var$ERA_END_DATES = [\n    [\n        1912,\n        7,\n        29\n    ],\n    [\n        1926,\n        12,\n        24\n    ],\n    [\n        1989,\n        1,\n        7\n    ],\n    [\n        2019,\n        4,\n        30\n    ]\n];\nconst $62225008020f0a13$var$ERA_ADDENDS = [\n    1867,\n    1911,\n    1925,\n    1988,\n    2018\n];\nconst $62225008020f0a13$var$ERA_NAMES = [\n    \"meiji\",\n    \"taisho\",\n    \"showa\",\n    \"heisei\",\n    \"reiwa\"\n];\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n    const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day])=>{\n        if (date.year < year) return true;\n        if (date.year === year && date.month < month) return true;\n        if (date.year === year && date.month === month && date.day < day) return true;\n        return false;\n    });\n    if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n    if (idx === 0) return 0;\n    return idx - 1;\n}\nfunction $62225008020f0a13$var$toGregorian(date) {\n    let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n    if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let date = super.fromJulianDay(jd);\n        let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n    }\n    balanceDate(date) {\n        let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n        let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n        if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n            date.era = $62225008020f0a13$var$ERA_NAMES[era];\n            date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n        }\n        // Constrain in case we went before the first supported era.\n        this.constrainDate(date);\n    }\n    constrainDate(date) {\n        let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n        let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n        if (end != null) {\n            let [endYear, endMonth, endDay] = end;\n            // Constrain the year to the maximum possible value in the era.\n            // Then constrain the month and day fields within that.\n            let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n            date.year = Math.max(1, Math.min(maxYear, date.year));\n            if (date.year === maxYear) {\n                date.month = Math.min(endMonth, date.month);\n                if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n            }\n        }\n        if (date.year === 1 && idx >= 0) {\n            let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n            date.month = Math.max(startMonth, date.month);\n            if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n        }\n    }\n    getEras() {\n        return $62225008020f0a13$var$ERA_NAMES;\n    }\n    getYearsInEra(date) {\n        // Get the number of years in the era, taking into account the date's month and day fields.\n        let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n        let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n        let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n        if (next == null) return 9999 - cur[0] + 1;\n        let years = next[0] - cur[0];\n        if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n        return years;\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n    }\n    getMinimumMonthInYear(date) {\n        let start = $62225008020f0a13$var$getMinimums(date);\n        return start ? start[1] : 1;\n    }\n    getMinimumDayInMonth(date) {\n        let start = $62225008020f0a13$var$getMinimums(date);\n        return start && date.month === start[1] ? start[2] : 1;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"japanese\";\n    }\n}\nfunction $62225008020f0a13$var$getMinimums(date) {\n    if (date.year === 1) {\n        let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n        return $62225008020f0a13$var$ERA_START_DATES[idx];\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let gregorianDate = super.fromJulianDay(jd);\n        let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n    }\n    getEras() {\n        return [\n            \"BE\"\n        ];\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n    }\n    balanceDate() {}\n    constructor(...args){\n        super(...args);\n        this.identifier = \"buddhist\";\n    }\n}\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n    return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n    let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n    if (y > 0) return [\n        \"minguo\",\n        y\n    ];\n    else return [\n        \"before_minguo\",\n        1 - y\n    ];\n}\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let date = super.fromJulianDay(jd);\n        let extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n        let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n    getEras() {\n        return [\n            \"before_minguo\",\n            \"minguo\"\n        ];\n    }\n    balanceDate(date) {\n        let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n        date.era = era;\n        date.year = year;\n    }\n    isInverseEra(date) {\n        return date.era === \"before_minguo\";\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n    getYearsInEra(date) {\n        return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"roc\" // Republic of China\n        ;\n    }\n}\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n    let y0 = year > 0 ? year - 474 : year - 473;\n    let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n    return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n    let y0 = year > 0 ? year - 474 : year - 473;\n    let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n    let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n    return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n    fromJulianDay(jd) {\n        let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n        let n2820 = Math.floor(d0 / 1029983);\n        let d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n        let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n        let year = 474 + 2820 * n2820 + y2820;\n        if (year <= 0) year--;\n        let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n        let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n        let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n    toJulianDay(date) {\n        return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n    }\n    getMonthsInYear() {\n        return 12;\n    }\n    getDaysInMonth(date) {\n        if (date.month <= 6) return 31;\n        if (date.month <= 11) return 30;\n        return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n    }\n    getEras() {\n        return [\n            \"AP\"\n        ];\n    }\n    getYearsInEra() {\n        // 9378-10-10 persian is 9999-12-31 gregorian.\n        // Round down to 9377 to set the maximum full year.\n        return 9377;\n    }\n    constructor(){\n        this.identifier = \"persian\";\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n// Starts in 78 AD,\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        // Gregorian date for Julian day\n        let date = super.fromJulianDay(jd);\n        // Year in Saka era\n        let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;\n        // Day number in Gregorian year (starting from 0)\n        let yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n        let leapMonth;\n        if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n            //  Day is at the end of the preceding Saka year\n            indianYear--;\n            // Days in leapMonth this year, previous Gregorian year\n            leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n            yDay += leapMonth + 155 + 90 + 10;\n        } else {\n            // Days in leapMonth this year\n            leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n            yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n        }\n        let indianMonth;\n        let indianDay;\n        if (yDay < leapMonth) {\n            indianMonth = 1;\n            indianDay = yDay + 1;\n        } else {\n            let mDay = yDay - leapMonth;\n            if (mDay < 155) {\n                indianMonth = Math.floor(mDay / 31) + 2;\n                indianDay = mDay % 31 + 1;\n            } else {\n                mDay -= 155;\n                indianMonth = Math.floor(mDay / 30) + 7;\n                indianDay = mDay % 30 + 1;\n            }\n        }\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n    }\n    toJulianDay(date) {\n        let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n        let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);\n        let leapMonth;\n        let jd;\n        if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n            leapMonth = 31;\n            jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n        } else {\n            leapMonth = 30;\n            jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n        }\n        if (date.month === 1) return jd + date.day - 1;\n        jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n        if (date.month >= 8) jd += (date.month - 7) * 30;\n        jd += date.day - 1;\n        return jd;\n    }\n    getDaysInMonth(date) {\n        if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n        if (date.month >= 2 && date.month <= 6) return 31;\n        return 30;\n    }\n    getYearsInEra() {\n        // 9999-12-31 gregorian is 9920-10-10 indian.\n        // Round down to 9919 for the last full year.\n        return 9919;\n    }\n    getEras() {\n        return [\n            \"saka\"\n        ];\n    }\n    balanceDate() {}\n    constructor(...args){\n        super(...args);\n        this.identifier = \"indian\";\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n    return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n    let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n    let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n    let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n    return (14 + 11 * year) % 30 < 11;\n}\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n    }\n    toJulianDay(date) {\n        return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        let length = 29 + date.month % 2;\n        if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n        return length;\n    }\n    getMonthsInYear() {\n        return 12;\n    }\n    getDaysInYear(date) {\n        return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n    }\n    getYearsInEra() {\n        // 9999 gregorian\n        return 9665;\n    }\n    getEras() {\n        return [\n            \"AH\"\n        ];\n    }\n    constructor(){\n        this.identifier = \"islamic-civil\";\n    }\n}\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n    }\n    toJulianDay(date) {\n        return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"islamic-tbla\";\n    }\n}\n// Generated by scripts/generate-umalqura.js\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n    return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n    let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n    let mask = 0x01 << 11 - (month - 1);\n    if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;\n    else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n    let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n    for(let i = 1; i < month; i++)day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n    return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n    return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n        let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n        let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n        if (days < startDays || days > endDays) return super.fromJulianDay(jd);\n        else {\n            let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n            let m = 1;\n            let d = 1;\n            while(d > 0){\n                y++;\n                d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n                let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n                if (d === yearLength) {\n                    m = 12;\n                    break;\n                } else if (d < yearLength) {\n                    let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n                    m = 1;\n                    while(d > monthLength){\n                        d -= monthLength;\n                        m++;\n                        monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n                    }\n                    break;\n                }\n            }\n            return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n        }\n    }\n    toJulianDay(date) {\n        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n        return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n    }\n    getDaysInMonth(date) {\n        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n        return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n    }\n    getDaysInYear(date) {\n        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n        return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n    }\n    constructor(){\n        super();\n        this.identifier = \"islamic-umalqura\";\n        if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), (c)=>c.charCodeAt(0)).buffer);\n        if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n            $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n            let yearStart = 0;\n            for(let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++){\n                $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n                for(let i = 1; i <= 12; i++)yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n            }\n        }\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n    return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n    let months = Math.floor((235 * year - 234) / 19);\n    let parts = 12084 + 13753 * months;\n    let day = months * 29 + Math.floor(parts / 25920);\n    if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n    return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n    let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n    let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n    let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n    if (next - present === 356) return 2;\n    if (present - last === 382) return 1;\n    return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n    return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n    return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n    let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n    if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n    switch(yearLength){\n        case 353:\n            return 0; // deficient\n        case 354:\n            return 1; // normal\n        case 355:\n            return 2; // complete\n    }\n}\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n    // Normalize month numbers from 1 - 13, even on non-leap years\n    if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n    // First of all, dispose of fixed-length 29 day months\n    if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n    let yearType = $7c5f6fbf42389787$var$getYearType(year);\n    // If it's Heshvan, days depend on length of year\n    if (month === 2) return yearType === 2 ? 30 : 29;\n    // Similarly, Kislev varies with the length of year\n    if (month === 3) return yearType === 0 ? 29 : 30;\n    // Adar I only exists in leap years\n    if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n    return 30;\n}\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n    fromJulianDay(jd) {\n        let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n        let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n        let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n        let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n        let dayOfYear = Math.floor(d - ys);\n        // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n        while(dayOfYear < 1){\n            year--;\n            ys = $7c5f6fbf42389787$var$startOfYear(year);\n            dayOfYear = Math.floor(d - ys);\n        }\n        // Now figure out which month we're in, and the date within that month\n        let month = 1;\n        let monthStart = 0;\n        while(monthStart < dayOfYear){\n            monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n            month++;\n        }\n        month--;\n        monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n        let day = dayOfYear - monthStart;\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n    toJulianDay(date) {\n        let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n        for(let month = 1; month < date.month; month++)jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n        return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    }\n    getDaysInMonth(date) {\n        return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n    }\n    getMonthsInYear(date) {\n        return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n    }\n    getDaysInYear(date) {\n        return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n    }\n    getYearsInEra() {\n        // 6239 gregorian\n        return 9999;\n    }\n    getEras() {\n        return [\n            \"AM\"\n        ];\n    }\n    balanceYearMonth(date, previousDate) {\n        // Keep date in the same month when switching between leap years and non leap years\n        if (previousDate.year !== date.year) {\n            if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;\n            else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n        }\n    }\n    constructor(){\n        this.identifier = \"hebrew\";\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n    return epoch // difference from Julian epoch to 1,1,1\n     + 365 * year // number of days from years\n     + Math.floor(year / 4) // extra day of leap year\n     + 30 * (month - 1 // number of days from months (1 based)\n    ) + day - 1 // number of days for present month (1 based)\n    ;\n}\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n    let year = Math.floor(4 * (jd - epoch) / 1461);\n    let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n    let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n    return [\n        year,\n        month,\n        day\n    ];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n    return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n    // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n    // an intercalary month at the end of the year of 5 or 6 days, depending whether\n    // the year is a leap year or not. The Leap Year follows the same rules as the\n    // Julian Calendar so that the extra month always has six days in the year before\n    // a Julian Leap Year.\n    if (month % 13 !== 0) return 30;\n    else return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n        let era = \"AM\";\n        if (year <= 0) {\n            era = \"AA\";\n            year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n        }\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n    toJulianDay(date) {\n        let year = date.year;\n        if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n        return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n    }\n    getMonthsInYear() {\n        return 13;\n    }\n    getDaysInYear(date) {\n        return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n    }\n    getYearsInEra(date) {\n        // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n        // Round down to 9991 for the last full year.\n        // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n        return date.era === \"AA\" ? 9999 : 9991;\n    }\n    getEras() {\n        return [\n            \"AA\",\n            \"AM\"\n        ];\n    }\n    constructor(){\n        this.identifier = \"ethiopic\";\n    }\n}\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n        year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n    }\n    getEras() {\n        return [\n            \"AA\"\n        ];\n    }\n    getYearsInEra() {\n        // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n        return 9999;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"ethioaa\" // also known as 'ethiopic-amete-alem' in ICU\n        ;\n    }\n}\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n        let era = \"CE\";\n        if (year <= 0) {\n            era = \"BCE\";\n            year = 1 - year;\n        }\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n    toJulianDay(date) {\n        let year = date.year;\n        if (date.era === \"BCE\") year = 1 - year;\n        return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        let year = date.year;\n        if (date.era === \"BCE\") year = 1 - year;\n        return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n    }\n    isInverseEra(date) {\n        return date.era === \"BCE\";\n    }\n    balanceDate(date) {\n        if (date.year <= 0) {\n            date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n            date.year = 1 - date.year;\n        }\n    }\n    getEras() {\n        return [\n            \"BCE\",\n            \"CE\"\n        ];\n    }\n    getYearsInEra(date) {\n        // 9999-12-30 gregorian is 9716-02-20 coptic.\n        // Round down to 9715 for the last full year.\n        // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n        return date.era === \"BCE\" ? 9999 : 9715;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"coptic\";\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ function $64244302c3013299$export$dd0bbc9b26defe37(name) {\n    switch(name){\n        case \"buddhist\":\n            return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n        case \"ethiopic\":\n            return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n        case \"ethioaa\":\n            return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n        case \"coptic\":\n            return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n        case \"hebrew\":\n            return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n        case \"indian\":\n            return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n        case \"islamic-civil\":\n            return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n        case \"islamic-tbla\":\n            return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n        case \"islamic-umalqura\":\n            return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n        case \"japanese\":\n            return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n        case \"persian\":\n            return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n        case \"roc\":\n            return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n        case \"gregory\":\n        default:\n            return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $fb18d541ea1ad717$var$formatterCache = new Map();\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n    /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {\n        return this.formatter.format(value);\n    }\n    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */ formatToParts(value) {\n        return this.formatter.formatToParts(value);\n    }\n    /** Formats a date range as a string. */ formatRange(start, end) {\n        // @ts-ignore\n        if (typeof this.formatter.formatRange === \"function\") return this.formatter.formatRange(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        // Very basic fallback for old browsers.\n        return `${this.formatter.format(start)} \\u{2013} ${this.formatter.format(end)}`;\n    }\n    /** Formats a date range as an array of parts. */ formatRangeToParts(start, end) {\n        // @ts-ignore\n        if (typeof this.formatter.formatRangeToParts === \"function\") return this.formatter.formatRangeToParts(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        let startParts = this.formatter.formatToParts(start);\n        let endParts = this.formatter.formatToParts(end);\n        return [\n            ...startParts.map((p)=>({\n                    ...p,\n                    source: \"startRange\"\n                })),\n            {\n                type: \"literal\",\n                value: \" – \",\n                source: \"shared\"\n            },\n            ...endParts.map((p)=>({\n                    ...p,\n                    source: \"endRange\"\n                }))\n        ];\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {\n        let resolvedOptions = this.formatter.resolvedOptions();\n        if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n            if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n            resolvedOptions.hourCycle = this.resolvedHourCycle;\n            resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n        }\n        // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n        // https://bugs.webkit.org/show_bug.cgi?id=241564\n        if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n        return resolvedOptions;\n    }\n    constructor(locale, options = {}){\n        this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n        this.options = options;\n    }\n}\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n    true: {\n        // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n        ja: \"h11\"\n    },\n    false: {}\n};\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {\n    // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n    // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n    if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n        options = {\n            ...options\n        };\n        let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n        let defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n        options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n        delete options.hour12;\n    }\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : \"\");\n    if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n    let numberFormatter = new Intl.DateTimeFormat(locale, options);\n    $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n    return numberFormatter;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n    if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n        hour: \"numeric\",\n        hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === \"24\";\n    return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n    if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n        hour: \"numeric\",\n        hour12: false\n    }).resolvedOptions().hourCycle === \"h12\";\n    return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n    if (!options.timeStyle && !options.hour) return undefined;\n    // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n    // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n    locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n    locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n    let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {\n        ...options,\n        timeZone: undefined // use local timezone\n    });\n    let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p)=>p.type === \"hour\").value, 10);\n    let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p)=>p.type === \"hour\").value, 10);\n    if (min === 0 && max === 23) return \"h23\";\n    if (min === 24 && max === 23) return \"h24\";\n    if (min === 0 && max === 11) return \"h11\";\n    if (min === 12 && max === 11) return \"h12\";\n    throw new Error(\"Unexpected hour cycle result\");\n}\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@internationalized+date@3.5.2/node_modules/@internationalized/date/dist/import.mjs\n");

/***/ })

};
;