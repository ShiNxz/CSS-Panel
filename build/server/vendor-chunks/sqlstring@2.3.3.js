/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sqlstring@2.3.3";
exports.ids = ["vendor-chunks/sqlstring@2.3.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/index.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib/SqlString */ \"(rsc)/./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/lib/SqlString.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vc3Fsc3RyaW5nQDIuMy4zL25vZGVfbW9kdWxlcy9zcWxzdHJpbmcvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxpSkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jc3MtcGFuZWwvLi9ub2RlX21vZHVsZXMvLnBucG0vc3Fsc3RyaW5nQDIuMy4zL25vZGVfbW9kdWxlcy9zcWxzdHJpbmcvaW5kZXguanM/YTRiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL1NxbFN0cmluZycpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/lib/SqlString.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/lib/SqlString.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var SqlString = exports;\nvar ID_GLOBAL_REGEXP = /`/g;\nvar QUAL_GLOBAL_REGEXP = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP = {\n    \"\\x00\": \"\\\\0\",\n    \"\\b\": \"\\\\b\",\n    \"\t\": \"\\\\t\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\\x1a\": \"\\\\Z\",\n    '\"': '\\\\\"',\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n    if (Array.isArray(val)) {\n        var sql = \"\";\n        for(var i = 0; i < val.length; i++){\n            sql += (i === 0 ? \"\" : \", \") + SqlString.escapeId(val[i], forbidQualified);\n        }\n        return sql;\n    } else if (forbidQualified) {\n        return \"`\" + String(val).replace(ID_GLOBAL_REGEXP, \"``\") + \"`\";\n    } else {\n        return \"`\" + String(val).replace(ID_GLOBAL_REGEXP, \"``\").replace(QUAL_GLOBAL_REGEXP, \"`.`\") + \"`\";\n    }\n};\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n    if (val === undefined || val === null) {\n        return \"NULL\";\n    }\n    switch(typeof val){\n        case \"boolean\":\n            return val ? \"true\" : \"false\";\n        case \"number\":\n            return val + \"\";\n        case \"object\":\n            if (Object.prototype.toString.call(val) === \"[object Date]\") {\n                return SqlString.dateToString(val, timeZone || \"local\");\n            } else if (Array.isArray(val)) {\n                return SqlString.arrayToList(val, timeZone);\n            } else if (Buffer.isBuffer(val)) {\n                return SqlString.bufferToString(val);\n            } else if (typeof val.toSqlString === \"function\") {\n                return String(val.toSqlString());\n            } else if (stringifyObjects) {\n                return escapeString(val.toString());\n            } else {\n                return SqlString.objectToValues(val, timeZone);\n            }\n        default:\n            return escapeString(val);\n    }\n};\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n    var sql = \"\";\n    for(var i = 0; i < array.length; i++){\n        var val = array[i];\n        if (Array.isArray(val)) {\n            sql += (i === 0 ? \"\" : \", \") + \"(\" + SqlString.arrayToList(val, timeZone) + \")\";\n        } else {\n            sql += (i === 0 ? \"\" : \", \") + SqlString.escape(val, true, timeZone);\n        }\n    }\n    return sql;\n};\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n    if (values == null) {\n        return sql;\n    }\n    if (!Array.isArray(values)) {\n        values = [\n            values\n        ];\n    }\n    var chunkIndex = 0;\n    var placeholdersRegex = /\\?+/g;\n    var result = \"\";\n    var valuesIndex = 0;\n    var match;\n    while(valuesIndex < values.length && (match = placeholdersRegex.exec(sql))){\n        var len = match[0].length;\n        if (len > 2) {\n            continue;\n        }\n        var value = len === 2 ? SqlString.escapeId(values[valuesIndex]) : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n        result += sql.slice(chunkIndex, match.index) + value;\n        chunkIndex = placeholdersRegex.lastIndex;\n        valuesIndex++;\n    }\n    if (chunkIndex === 0) {\n        // Nothing was replaced\n        return sql;\n    }\n    if (chunkIndex < sql.length) {\n        return result + sql.slice(chunkIndex);\n    }\n    return result;\n};\nSqlString.dateToString = function dateToString(date, timeZone) {\n    var dt = new Date(date);\n    if (isNaN(dt.getTime())) {\n        return \"NULL\";\n    }\n    var year;\n    var month;\n    var day;\n    var hour;\n    var minute;\n    var second;\n    var millisecond;\n    if (timeZone === \"local\") {\n        year = dt.getFullYear();\n        month = dt.getMonth() + 1;\n        day = dt.getDate();\n        hour = dt.getHours();\n        minute = dt.getMinutes();\n        second = dt.getSeconds();\n        millisecond = dt.getMilliseconds();\n    } else {\n        var tz = convertTimezone(timeZone);\n        if (tz !== false && tz !== 0) {\n            dt.setTime(dt.getTime() + tz * 60000);\n        }\n        year = dt.getUTCFullYear();\n        month = dt.getUTCMonth() + 1;\n        day = dt.getUTCDate();\n        hour = dt.getUTCHours();\n        minute = dt.getUTCMinutes();\n        second = dt.getUTCSeconds();\n        millisecond = dt.getUTCMilliseconds();\n    }\n    // YYYY-MM-DD HH:mm:ss.mmm\n    var str = zeroPad(year, 4) + \"-\" + zeroPad(month, 2) + \"-\" + zeroPad(day, 2) + \" \" + zeroPad(hour, 2) + \":\" + zeroPad(minute, 2) + \":\" + zeroPad(second, 2) + \".\" + zeroPad(millisecond, 3);\n    return escapeString(str);\n};\nSqlString.bufferToString = function bufferToString(buffer) {\n    return \"X\" + escapeString(buffer.toString(\"hex\"));\n};\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n    var sql = \"\";\n    for(var key in object){\n        var val = object[key];\n        if (typeof val === \"function\") {\n            continue;\n        }\n        sql += (sql.length === 0 ? \"\" : \", \") + SqlString.escapeId(key) + \" = \" + SqlString.escape(val, true, timeZone);\n    }\n    return sql;\n};\nSqlString.raw = function raw(sql) {\n    if (typeof sql !== \"string\") {\n        throw new TypeError(\"argument sql must be a string\");\n    }\n    return {\n        toSqlString: function toSqlString() {\n            return sql;\n        }\n    };\n};\nfunction escapeString(val) {\n    var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n    var escapedVal = \"\";\n    var match;\n    while(match = CHARS_GLOBAL_REGEXP.exec(val)){\n        escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n        chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n    }\n    if (chunkIndex === 0) {\n        // Nothing was escaped\n        return \"'\" + val + \"'\";\n    }\n    if (chunkIndex < val.length) {\n        return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n    }\n    return \"'\" + escapedVal + \"'\";\n}\nfunction zeroPad(number, length) {\n    number = number.toString();\n    while(number.length < length){\n        number = \"0\" + number;\n    }\n    return number;\n}\nfunction convertTimezone(tz) {\n    if (tz === \"Z\") {\n        return 0;\n    }\n    var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n    if (m) {\n        return (m[1] === \"-\" ? -1 : 1) * (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) * 60;\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/sqlstring@2.3.3/node_modules/sqlstring/lib/SqlString.js\n");

/***/ })

};
;