"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/steam-api-sdk@1.4.5";
exports.ids = ["vendor-chunks/steam-api-sdk@1.4.5"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/steam-api-sdk@1.4.5/node_modules/steam-api-sdk/dist/index.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/steam-api-sdk@1.4.5/node_modules/steam-api-sdk/dist/index.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   From32To64: () => (/* binding */ From32To64_default),\n/* harmony export */   From64To32: () => (/* binding */ From64To32_default),\n/* harmony export */   From64ToSteamID: () => (/* binding */ From64ToSteamID_default),\n/* harmony export */   From64ToUser: () => (/* binding */ From64ToUser_default),\n/* harmony export */   GetSteamUser: () => (/* binding */ GetSteamUser_default),\n/* harmony export */   SteamIDToSteam64: () => (/* binding */ SteamIDToSteam64_default),\n/* harmony export */   VanityURLTo64: () => (/* binding */ VanityUrlTo64_default),\n/* harmony export */   config: () => (/* binding */ config_default)\n/* harmony export */ });\n/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! big.js */ \"(rsc)/./node_modules/.pnpm/big.js@6.2.1/node_modules/big.js/big.mjs\");\n/* harmony import */ var _barrel_optimize_names_takeRight_lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=takeRight!=!lodash-es */ \"(rsc)/./node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/takeRight.js\");\n/* harmony import */ var _barrel_optimize_names_dropRight_lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=dropRight!=!lodash-es */ \"(rsc)/./node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/dropRight.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/.pnpm/axios@1.6.5/node_modules/axios/lib/axios.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// config.ts\nvar config = {\n    apiKey: process.env.STEAM_API_KEY || null\n};\nvar config_default = config;\n// functions/From32To64.ts\n\n// utils.ts\n\nvar BASE_NUM = (0,big_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"76561197960265728\");\n// functions/From32To64.ts\nvar From32To64 = (steam32)=>(0,big_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(steam32).plus(BASE_NUM).toString();\nvar From32To64_default = From32To64;\n// functions/From64To32.ts\n\nvar From64To32 = (steam64)=>(0,big_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(steam64).minus(BASE_NUM).toString();\nvar From64To32_default = From64To32;\n// functions/From64ToSteamID.ts\n\nvar Steam64ToID = (steam64)=>{\n    if (!steam64 || typeof steam64 !== \"string\") return null;\n    let v = BASE_NUM, w = (0,big_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(steam64), y = w.mod(2).toString();\n    w = w.minus(y).minus(v);\n    if (parseInt(w) < 1) return null;\n    return [\n        `STEAM_0:${y}:${w.div(2).toString()}`,\n        `STEAM_1:${y}:${w.div(2).toString()}`\n    ];\n};\nvar From64ToSteamID_default = Steam64ToID;\n// functions/From64ToUser.ts\n\n\n\nvar From64ToUser = (steam64)=>__async(void 0, null, function*() {\n        if (!steam64) return null;\n        if (Array.isArray(steam64)) {\n            if (steam64.length > 100) {\n                const allUsers = [];\n                while(steam64.length != 0){\n                    try {\n                        let users = (0,_barrel_optimize_names_takeRight_lodash_es__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(steam64, 100);\n                        steam64 = (0,_barrel_optimize_names_dropRight_lodash_es__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(steam64, 100);\n                        const { status, data } = yield SteamFetch(users);\n                        if (status !== 200 && data.response.players.length > 0) return null;\n                        const newUsers = data.response.players.map((p)=>__spreadProps(__spreadValues({}, p), {\n                                steamIds: From64ToSteamID_default(p.steamid)\n                            }));\n                        allUsers.push(...newUsers);\n                    } catch (error) {\n                        console.error(error);\n                    }\n                }\n                return allUsers;\n            } else {\n                try {\n                    const { status, data } = yield SteamFetch(steam64);\n                    if (status !== 200 && data.response.players.length > 0) return null;\n                    return data.response.players.map((p)=>__spreadProps(__spreadValues({}, p), {\n                            steamIds: From64ToSteamID_default(p.steamid)\n                        }));\n                } catch (error) {\n                    console.error(error);\n                    return null;\n                }\n            }\n        } else {\n            const { status, data } = yield SteamFetch(steam64);\n            if (status !== 200 && data.response.players.length > 0) return null;\n            return data.response.players.map((p)=>__spreadProps(__spreadValues({}, p), {\n                    steamIds: From64ToSteamID_default(p.steamid)\n                }));\n        }\n    });\nvar SteamFetch = (users)=>__async(void 0, null, function*() {\n        return new Promise((resolve, reject)=>__async(void 0, null, function*() {\n                var _a;\n                let apiKey = null;\n                if (typeof config_default.apiKey === \"string\") {\n                    if ((_a = config_default.apiKey) == null ? void 0 : _a.includes(\",\")) {\n                        const keys = config_default.apiKey.split(\",\");\n                        apiKey = keys[Math.floor(Math.random() * keys.length)];\n                    } else {\n                        apiKey = config_default.apiKey;\n                    }\n                } else if (Array.isArray(config_default.apiKey)) {\n                    apiKey = config_default.apiKey[Math.floor(Math.random() * config_default.apiKey.length)];\n                }\n                try {\n                    const data = yield (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(`http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${apiKey}&format=json&steamids=${Array.isArray(users) ? users.join(\",\") : users}`);\n                    resolve(data);\n                } catch (error) {\n                    reject(error);\n                }\n            }));\n    });\nvar From64ToUser_default = From64ToUser;\n// functions/SteamIDToSteam64.ts\nvar SteamIDTo64 = (steamid)=>{\n    if (!steamid || typeof steamid !== \"string\") return null;\n    let split = steamid.split(\":\"), v = BASE_NUM, z = split[2], y = split[1];\n    if (z && y) return v.plus(parseInt(z) * 2).plus(y).toString();\n    return null;\n};\nvar SteamIDToSteam64_default = SteamIDTo64;\n// functions/VanityUrlTo64.ts\n\nvar VanityURLTo64 = (url)=>__async(void 0, null, function*() {\n        if (!url || typeof url !== \"string\") return null;\n        if (!url.includes(\"steamcommunity.com/id/\")) return null;\n        const newUrl = url.replace(\"steamcommunity.com/id/\", \"\").replace(\"https://\", \"\").replace(\"http://\", \"\").replace(\"/\", \"\");\n        if (newUrl.length < 1) return null;\n        const API = `http://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=${config_default.apiKey}&vanityurl=${newUrl}`;\n        const { data: { response } } = yield (0,axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(API);\n        const { success, steamid } = response;\n        if (!success) return null;\n        return steamid;\n    });\nvar VanityUrlTo64_default = VanityURLTo64;\n// functions/GetSteamUser.ts\nvar GetSteamUser = (identifier)=>__async(void 0, null, function*() {\n        if (!identifier) return null;\n        let steam64 = null;\n        if (identifier.includes(\"steamcommunity.com/id/\")) {\n            steam64 = yield VanityUrlTo64_default(identifier);\n            if (!steam64) return null;\n        } else if (identifier.includes(\"steamcommunity.com/profiles/\")) {\n            identifier = identifier.replace(\"steamcommunity.com/profiles/\", \"\").replace(\"https://\", \"\").replace(\"http://\", \"\").replace(\"/\", \"\");\n            steam64 = identifier;\n        } else if (identifier && identifier.toString().startsWith(\"STEAM_\")) {\n            steam64 = SteamIDToSteam64_default(identifier);\n            if (!steam64) return null;\n        }\n        if (!identifier.startsWith(\"765\") && !steam64) {\n            console.log(\"ERROR\", \"Invalid SteamID64\", identifier, steam64);\n            return null;\n        }\n        const user = yield From64ToUser_default(steam64 || identifier);\n        if (!user || !user.length || !user[0]) return null;\n        return user[0];\n    });\nvar GetSteamUser_default = GetSteamUser;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vc3RlYW0tYXBpLXNka0AxLjQuNS9ub2RlX21vZHVsZXMvc3RlYW0tYXBpLXNkay9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGFBQWFGLE9BQU9HLGdCQUFnQjtBQUN4QyxJQUFJQyxvQkFBb0JKLE9BQU9LLHlCQUF5QjtBQUN4RCxJQUFJQyxzQkFBc0JOLE9BQU9PLHFCQUFxQjtBQUN0RCxJQUFJQyxlQUFlUixPQUFPUyxTQUFTLENBQUNDLGNBQWM7QUFDbEQsSUFBSUMsZUFBZVgsT0FBT1MsU0FBUyxDQUFDRyxvQkFBb0I7QUFDeEQsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1mLFVBQVVlLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksaUJBQWlCLENBQUNDLEdBQUdDO0lBQ3ZCLElBQUssSUFBSUMsUUFBUUQsS0FBTUEsQ0FBQUEsSUFBSSxDQUFDLEdBQzFCLElBQUlkLGFBQWFnQixJQUFJLENBQUNGLEdBQUdDLE9BQ3ZCVixnQkFBZ0JRLEdBQUdFLE1BQU1ELENBQUMsQ0FBQ0MsS0FBSztJQUNwQyxJQUFJakIscUJBQ0YsS0FBSyxJQUFJaUIsUUFBUWpCLG9CQUFvQmdCLEdBQUk7UUFDdkMsSUFBSVgsYUFBYWEsSUFBSSxDQUFDRixHQUFHQyxPQUN2QlYsZ0JBQWdCUSxHQUFHRSxNQUFNRCxDQUFDLENBQUNDLEtBQUs7SUFDcEM7SUFDRixPQUFPRjtBQUNUO0FBQ0EsSUFBSUksZ0JBQWdCLENBQUNKLEdBQUdDLElBQU1wQixXQUFXbUIsR0FBR2pCLGtCQUFrQmtCO0FBQzlELElBQUlJLFVBQVUsQ0FBQ0MsUUFBUUMsYUFBYUM7SUFDbEMsT0FB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QyxnQ0FBZ0MsSUFBSUEsT0FBTyxDQUFDLFlBQVksSUFBSUEsT0FBTyxDQUFDLFdBQVcsSUFBSUEsT0FBTyxDQUFDLEtBQUs7WUFDaElsRCxVQUFVdUQ7UUFDWixPQUFPLElBQUlBLGNBQWNBLFdBQVczRCxRQUFRLEdBQUc0RCxVQUFVLENBQUMsV0FBVztZQUNuRXhELFVBQVU2Qyx5QkFBeUJVO1lBQ25DLElBQUksQ0FBQ3ZELFNBQ0gsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDdUQsV0FBV0MsVUFBVSxDQUFDLFVBQVUsQ0FBQ3hELFNBQVM7WUFDN0NpQyxRQUFRd0IsR0FBRyxDQUFDLFNBQVMscUJBQXFCRixZQUFZdkQ7WUFDdEQsT0FBTztRQUNUO1FBQ0EsTUFBTTBELE9BQU8sTUFBTWhCLHFCQUFxQjFDLFdBQVd1RDtRQUNuRCxJQUFJLENBQUNHLFFBQVEsQ0FBQ0EsS0FBS3hDLE1BQU0sSUFBSSxDQUFDd0MsSUFBSSxDQUFDLEVBQUUsRUFDbkMsT0FBTztRQUNULE9BQU9BLElBQUksQ0FBQyxFQUFFO0lBQ2hCO0FBQ0EsSUFBSUMsdUJBQXVCTDtBQVV6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nzcy1wYW5lbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9zdGVhbS1hcGktc2RrQDEuNC41L25vZGVfbW9kdWxlcy9zdGVhbS1hcGktc2RrL2Rpc3QvaW5kZXgubWpzPzQ5MTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcbnZhciBfX2dldE93blByb3BTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19zcHJlYWRWYWx1ZXMgPSAoYSwgYikgPT4ge1xuICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxuICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcbiAgICBmb3IgKHZhciBwcm9wIG9mIF9fZ2V0T3duUHJvcFN5bWJvbHMoYikpIHtcbiAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcbiAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xuICAgIH1cbiAgcmV0dXJuIGE7XG59O1xudmFyIF9fc3ByZWFkUHJvcHMgPSAoYSwgYikgPT4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7XG52YXIgX19hc3luYyA9IChfX3RoaXMsIF9fYXJndW1lbnRzLCBnZW5lcmF0b3IpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgZnVsZmlsbGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWplY3RlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IudGhyb3codmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0ZXAgPSAoeCkgPT4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG4vLyBjb25maWcudHNcbnZhciBjb25maWcgPSB7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuU1RFQU1fQVBJX0tFWSB8fCBudWxsXG59O1xudmFyIGNvbmZpZ19kZWZhdWx0ID0gY29uZmlnO1xuXG4vLyBmdW5jdGlvbnMvRnJvbTMyVG82NC50c1xuaW1wb3J0IEJpZzIgZnJvbSBcImJpZy5qc1wiO1xuXG4vLyB1dGlscy50c1xuaW1wb3J0IEJpZyBmcm9tIFwiYmlnLmpzXCI7XG52YXIgQkFTRV9OVU0gPSBCaWcoXCI3NjU2MTE5Nzk2MDI2NTcyOFwiKTtcblxuLy8gZnVuY3Rpb25zL0Zyb20zMlRvNjQudHNcbnZhciBGcm9tMzJUbzY0ID0gKHN0ZWFtMzIpID0+IEJpZzIoc3RlYW0zMikucGx1cyhCQVNFX05VTSkudG9TdHJpbmcoKTtcbnZhciBGcm9tMzJUbzY0X2RlZmF1bHQgPSBGcm9tMzJUbzY0O1xuXG4vLyBmdW5jdGlvbnMvRnJvbTY0VG8zMi50c1xuaW1wb3J0IEJpZzMgZnJvbSBcImJpZy5qc1wiO1xudmFyIEZyb202NFRvMzIgPSAoc3RlYW02NCkgPT4gQmlnMyhzdGVhbTY0KS5taW51cyhCQVNFX05VTSkudG9TdHJpbmcoKTtcbnZhciBGcm9tNjRUbzMyX2RlZmF1bHQgPSBGcm9tNjRUbzMyO1xuXG4vLyBmdW5jdGlvbnMvRnJvbTY0VG9TdGVhbUlELnRzXG5pbXBvcnQgQmlnNCBmcm9tIFwiYmlnLmpzXCI7XG52YXIgU3RlYW02NFRvSUQgPSAoc3RlYW02NCkgPT4ge1xuICBpZiAoIXN0ZWFtNjQgfHwgdHlwZW9mIHN0ZWFtNjQgIT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIG51bGw7XG4gIGxldCB2ID0gQkFTRV9OVU0sIHcgPSBCaWc0KHN0ZWFtNjQpLCB5ID0gdy5tb2QoMikudG9TdHJpbmcoKTtcbiAgdyA9IHcubWludXMoeSkubWludXModik7XG4gIGlmIChwYXJzZUludCh3KSA8IDEpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiBbYFNURUFNXzA6JHt5fToke3cuZGl2KDIpLnRvU3RyaW5nKCl9YCwgYFNURUFNXzE6JHt5fToke3cuZGl2KDIpLnRvU3RyaW5nKCl9YF07XG59O1xudmFyIEZyb202NFRvU3RlYW1JRF9kZWZhdWx0ID0gU3RlYW02NFRvSUQ7XG5cbi8vIGZ1bmN0aW9ucy9Gcm9tNjRUb1VzZXIudHNcbmltcG9ydCB7IHRha2VSaWdodCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCB7IGRyb3BSaWdodCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbnZhciBGcm9tNjRUb1VzZXIgPSAoc3RlYW02NCkgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIGlmICghc3RlYW02NClcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3RlYW02NCkpIHtcbiAgICBpZiAoc3RlYW02NC5sZW5ndGggPiAxMDApIHtcbiAgICAgIGNvbnN0IGFsbFVzZXJzID0gW107XG4gICAgICB3aGlsZSAoc3RlYW02NC5sZW5ndGggIT0gMCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCB1c2VycyA9IHRha2VSaWdodChzdGVhbTY0LCAxMDApO1xuICAgICAgICAgIHN0ZWFtNjQgPSBkcm9wUmlnaHQoc3RlYW02NCwgMTAwKTtcbiAgICAgICAgICBjb25zdCB7IHN0YXR1cywgZGF0YSB9ID0geWllbGQgU3RlYW1GZXRjaCh1c2Vycyk7XG4gICAgICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwICYmIGRhdGEucmVzcG9uc2UucGxheWVycy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgY29uc3QgbmV3VXNlcnMgPSBkYXRhLnJlc3BvbnNlLnBsYXllcnMubWFwKChwKSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBwKSwge1xuICAgICAgICAgICAgc3RlYW1JZHM6IEZyb202NFRvU3RlYW1JRF9kZWZhdWx0KHAuc3RlYW1pZClcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgYWxsVXNlcnMucHVzaCguLi5uZXdVc2Vycyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxVc2VycztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGRhdGEgfSA9IHlpZWxkIFN0ZWFtRmV0Y2goc3RlYW02NCk7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IDIwMCAmJiBkYXRhLnJlc3BvbnNlLnBsYXllcnMubGVuZ3RoID4gMClcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIGRhdGEucmVzcG9uc2UucGxheWVycy5tYXAoKHApID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHApLCB7IHN0ZWFtSWRzOiBGcm9tNjRUb1N0ZWFtSURfZGVmYXVsdChwLnN0ZWFtaWQpIH0pKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyBzdGF0dXMsIGRhdGEgfSA9IHlpZWxkIFN0ZWFtRmV0Y2goc3RlYW02NCk7XG4gICAgaWYgKHN0YXR1cyAhPT0gMjAwICYmIGRhdGEucmVzcG9uc2UucGxheWVycy5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGRhdGEucmVzcG9uc2UucGxheWVycy5tYXAoKHApID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHApLCB7IHN0ZWFtSWRzOiBGcm9tNjRUb1N0ZWFtSURfZGVmYXVsdChwLnN0ZWFtaWQpIH0pKTtcbiAgfVxufSk7XG52YXIgU3RlYW1GZXRjaCA9ICh1c2VycykgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGFwaUtleSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBjb25maWdfZGVmYXVsdC5hcGlLZXkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmICgoX2EgPSBjb25maWdfZGVmYXVsdC5hcGlLZXkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyhcIixcIikpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IGNvbmZpZ19kZWZhdWx0LmFwaUtleS5zcGxpdChcIixcIik7XG4gICAgICAgIGFwaUtleSA9IGtleXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICoga2V5cy5sZW5ndGgpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwaUtleSA9IGNvbmZpZ19kZWZhdWx0LmFwaUtleTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnX2RlZmF1bHQuYXBpS2V5KSkge1xuICAgICAgYXBpS2V5ID0gY29uZmlnX2RlZmF1bHQuYXBpS2V5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbmZpZ19kZWZhdWx0LmFwaUtleS5sZW5ndGgpXTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB5aWVsZCBheGlvcyhcbiAgICAgICAgYGh0dHA6Ly9hcGkuc3RlYW1wb3dlcmVkLmNvbS9JU3RlYW1Vc2VyL0dldFBsYXllclN1bW1hcmllcy92Mi8/a2V5PSR7YXBpS2V5fSZmb3JtYXQ9anNvbiZzdGVhbWlkcz0ke0FycmF5LmlzQXJyYXkodXNlcnMpID8gdXNlcnMuam9pbihcIixcIikgOiB1c2Vyc31gXG4gICAgICApO1xuICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xudmFyIEZyb202NFRvVXNlcl9kZWZhdWx0ID0gRnJvbTY0VG9Vc2VyO1xuXG4vLyBmdW5jdGlvbnMvU3RlYW1JRFRvU3RlYW02NC50c1xudmFyIFN0ZWFtSURUbzY0ID0gKHN0ZWFtaWQpID0+IHtcbiAgaWYgKCFzdGVhbWlkIHx8IHR5cGVvZiBzdGVhbWlkICE9PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQgc3BsaXQgPSBzdGVhbWlkLnNwbGl0KFwiOlwiKSwgdiA9IEJBU0VfTlVNLCB6ID0gc3BsaXRbMl0sIHkgPSBzcGxpdFsxXTtcbiAgaWYgKHogJiYgeSlcbiAgICByZXR1cm4gdi5wbHVzKHBhcnNlSW50KHopICogMikucGx1cyh5KS50b1N0cmluZygpO1xuICByZXR1cm4gbnVsbDtcbn07XG52YXIgU3RlYW1JRFRvU3RlYW02NF9kZWZhdWx0ID0gU3RlYW1JRFRvNjQ7XG5cbi8vIGZ1bmN0aW9ucy9WYW5pdHlVcmxUbzY0LnRzXG5pbXBvcnQgYXhpb3MyIGZyb20gXCJheGlvc1wiO1xudmFyIFZhbml0eVVSTFRvNjQgPSAodXJsKSA9PiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKCF1cmwuaW5jbHVkZXMoXCJzdGVhbWNvbW11bml0eS5jb20vaWQvXCIpKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCBuZXdVcmwgPSB1cmwucmVwbGFjZShcInN0ZWFtY29tbXVuaXR5LmNvbS9pZC9cIiwgXCJcIikucmVwbGFjZShcImh0dHBzOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCJodHRwOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCIvXCIsIFwiXCIpO1xuICBpZiAobmV3VXJsLmxlbmd0aCA8IDEpXG4gICAgcmV0dXJuIG51bGw7XG4gIGNvbnN0IEFQSSA9IGBodHRwOi8vYXBpLnN0ZWFtcG93ZXJlZC5jb20vSVN0ZWFtVXNlci9SZXNvbHZlVmFuaXR5VVJML3YwMDAxLz9rZXk9JHtjb25maWdfZGVmYXVsdC5hcGlLZXl9JnZhbml0eXVybD0ke25ld1VybH1gO1xuICBjb25zdCB7XG4gICAgZGF0YTogeyByZXNwb25zZSB9XG4gIH0gPSB5aWVsZCBheGlvczIoQVBJKTtcbiAgY29uc3QgeyBzdWNjZXNzLCBzdGVhbWlkIH0gPSByZXNwb25zZTtcbiAgaWYgKCFzdWNjZXNzKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4gc3RlYW1pZDtcbn0pO1xudmFyIFZhbml0eVVybFRvNjRfZGVmYXVsdCA9IFZhbml0eVVSTFRvNjQ7XG5cbi8vIGZ1bmN0aW9ucy9HZXRTdGVhbVVzZXIudHNcbnZhciBHZXRTdGVhbVVzZXIgPSAoaWRlbnRpZmllcikgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIGlmICghaWRlbnRpZmllcilcbiAgICByZXR1cm4gbnVsbDtcbiAgbGV0IHN0ZWFtNjQgPSBudWxsO1xuICBpZiAoaWRlbnRpZmllci5pbmNsdWRlcyhcInN0ZWFtY29tbXVuaXR5LmNvbS9pZC9cIikpIHtcbiAgICBzdGVhbTY0ID0geWllbGQgVmFuaXR5VXJsVG82NF9kZWZhdWx0KGlkZW50aWZpZXIpO1xuICAgIGlmICghc3RlYW02NClcbiAgICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGlkZW50aWZpZXIuaW5jbHVkZXMoXCJzdGVhbWNvbW11bml0eS5jb20vcHJvZmlsZXMvXCIpKSB7XG4gICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIucmVwbGFjZShcInN0ZWFtY29tbXVuaXR5LmNvbS9wcm9maWxlcy9cIiwgXCJcIikucmVwbGFjZShcImh0dHBzOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCJodHRwOi8vXCIsIFwiXCIpLnJlcGxhY2UoXCIvXCIsIFwiXCIpO1xuICAgIHN0ZWFtNjQgPSBpZGVudGlmaWVyO1xuICB9IGVsc2UgaWYgKGlkZW50aWZpZXIgJiYgaWRlbnRpZmllci50b1N0cmluZygpLnN0YXJ0c1dpdGgoXCJTVEVBTV9cIikpIHtcbiAgICBzdGVhbTY0ID0gU3RlYW1JRFRvU3RlYW02NF9kZWZhdWx0KGlkZW50aWZpZXIpO1xuICAgIGlmICghc3RlYW02NClcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghaWRlbnRpZmllci5zdGFydHNXaXRoKFwiNzY1XCIpICYmICFzdGVhbTY0KSB7XG4gICAgY29uc29sZS5sb2coXCJFUlJPUlwiLCBcIkludmFsaWQgU3RlYW1JRDY0XCIsIGlkZW50aWZpZXIsIHN0ZWFtNjQpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHVzZXIgPSB5aWVsZCBGcm9tNjRUb1VzZXJfZGVmYXVsdChzdGVhbTY0IHx8IGlkZW50aWZpZXIpO1xuICBpZiAoIXVzZXIgfHwgIXVzZXIubGVuZ3RoIHx8ICF1c2VyWzBdKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4gdXNlclswXTtcbn0pO1xudmFyIEdldFN0ZWFtVXNlcl9kZWZhdWx0ID0gR2V0U3RlYW1Vc2VyO1xuZXhwb3J0IHtcbiAgRnJvbTMyVG82NF9kZWZhdWx0IGFzIEZyb20zMlRvNjQsXG4gIEZyb202NFRvMzJfZGVmYXVsdCBhcyBGcm9tNjRUbzMyLFxuICBGcm9tNjRUb1N0ZWFtSURfZGVmYXVsdCBhcyBGcm9tNjRUb1N0ZWFtSUQsXG4gIEZyb202NFRvVXNlcl9kZWZhdWx0IGFzIEZyb202NFRvVXNlcixcbiAgR2V0U3RlYW1Vc2VyX2RlZmF1bHQgYXMgR2V0U3RlYW1Vc2VyLFxuICBTdGVhbUlEVG9TdGVhbTY0X2RlZmF1bHQgYXMgU3RlYW1JRFRvU3RlYW02NCxcbiAgVmFuaXR5VXJsVG82NF9kZWZhdWx0IGFzIFZhbml0eVVSTFRvNjQsXG4gIGNvbmZpZ19kZWZhdWx0IGFzIGNvbmZpZ1xufTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmUHJvcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19wcm9wSXNFbnVtIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fc3ByZWFkVmFsdWVzIiwiYSIsImIiLCJwcm9wIiwiY2FsbCIsIl9fc3ByZWFkUHJvcHMiLCJfX2FzeW5jIiwiX190aGlzIiwiX19hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwidGhyb3ciLCJ4IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImNvbmZpZyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJTVEVBTV9BUElfS0VZIiwiY29uZmlnX2RlZmF1bHQiLCJCaWcyIiwiQmlnIiwiQkFTRV9OVU0iLCJGcm9tMzJUbzY0Iiwic3RlYW0zMiIsInBsdXMiLCJ0b1N0cmluZyIsIkZyb20zMlRvNjRfZGVmYXVsdCIsIkJpZzMiLCJGcm9tNjRUbzMyIiwic3RlYW02NCIsIm1pbnVzIiwiRnJvbTY0VG8zMl9kZWZhdWx0IiwiQmlnNCIsIlN0ZWFtNjRUb0lEIiwidiIsInciLCJ5IiwibW9kIiwicGFyc2VJbnQiLCJkaXYiLCJGcm9tNjRUb1N0ZWFtSURfZGVmYXVsdCIsInRha2VSaWdodCIsImRyb3BSaWdodCIsImF4aW9zIiwiRnJvbTY0VG9Vc2VyIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiYWxsVXNlcnMiLCJ1c2VycyIsInN0YXR1cyIsImRhdGEiLCJTdGVhbUZldGNoIiwicmVzcG9uc2UiLCJwbGF5ZXJzIiwibmV3VXNlcnMiLCJtYXAiLCJwIiwic3RlYW1JZHMiLCJzdGVhbWlkIiwicHVzaCIsImVycm9yIiwiY29uc29sZSIsIl9hIiwiaW5jbHVkZXMiLCJrZXlzIiwic3BsaXQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJqb2luIiwiRnJvbTY0VG9Vc2VyX2RlZmF1bHQiLCJTdGVhbUlEVG82NCIsInoiLCJTdGVhbUlEVG9TdGVhbTY0X2RlZmF1bHQiLCJheGlvczIiLCJWYW5pdHlVUkxUbzY0IiwidXJsIiwibmV3VXJsIiwicmVwbGFjZSIsIkFQSSIsInN1Y2Nlc3MiLCJWYW5pdHlVcmxUbzY0X2RlZmF1bHQiLCJHZXRTdGVhbVVzZXIiLCJpZGVudGlmaWVyIiwic3RhcnRzV2l0aCIsImxvZyIsInVzZXIiLCJHZXRTdGVhbVVzZXJfZGVmYXVsdCIsIkZyb202NFRvU3RlYW1JRCIsIlN0ZWFtSURUb1N0ZWFtNjQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/steam-api-sdk@1.4.5/node_modules/steam-api-sdk/dist/index.mjs\n");

/***/ })

};
;